Activate virtualenv

. venv/bin/activate

---------------------------------------------------------
To ssh into a GALAXY and print out galileo.conf and firmware details

Command: ssh root@192.168.0.112 'bash -s' < ~/bin/galaxy_info.sh 

---------------------------------------------------------
# update local branch with remote branch of the same name
git checkout zach_refactor origin zach_refactor
# start rebasing from master
git pull --rebase origin master

Loop:
 1) resolve all conflicts in IDE
 2) git add <list of resolved conflict files>
 3) git rebase --continue
  ... Once rebase is complete (no more conflicts)...
# Push your changes to master
git push origin refs/heads/zach_refactor:refs/heads/master
# remove remote branch
git push origin -d zach_refactor
# remove local branch
git branch -D zach_refactor
---
Rebase does this:
# Rewind to last common ancestor commit between branches
# Apply all commits in master up to HEAD
# From the common ancestor in zach_refactor-HEAD, apply each commit

---------------------------------------------------------
sed command to replace 

sed -i '' -e 's|foo|bar|g' -e 's|fee|fi|g' *

replace foo with bar, replace fee with fi

---------------------------------------------------------
Remove the first 'n' number of characters from each line in vi script

vi

:%s/^.\{0,'n'\}//

---------------------------------------------------------
DHCP Stuff
In SQA Lab, DHCP Server running on 192.168.0.1 (TAF Linux VirtualBox)

Commands to check if processes are running:

ps -elf | grep -i dhcp
lsof -i udp -nP

Leases: /var/lib/dhcp/dhcpd.leases
Config: /etc/dhcp/dhcpd.conf
Server: /etc/init.d/isc-dhcp-server (to restart: /etc/init.d/isc-dhcp-server restart)



---------------------------------------------------------
htop -- an interactive process viewer and manager for Unix

M - sort by memory usage

---------------------------------------------------------
TFTP Server on Linux Box 192.168.0.1

/etc/inet.d.conf
serving: /srv/tftp (soft link -> to /home/firmware/Extreme Switch Firmware

inet.d.conf is a super-daemon -- runs other daemons
tftp	dgram	udp	wait	nobody	/usr/sbin/tcpd	/usr/sbin/in.tftpd /srv/tft

To list tftp ports (69)

lsof -i udp -nP

---------------------------------------------------------
Show USB devices on Mac

ioreg -p IOUSB -l -w 0
---------------------------------------------------------
Monitor Linux ports on GALAXY

Serial in
while [ 1 ]; do  cat /proc/net/dev; sleep 1; clear; done
---------------------------------------------------------
zip a folder:

zip -r -X zippedfolder.zip folder
---------------------------------------------------------
To add local ssh keys for remote machine access (saturn-desktop3 as example):

cat ~/.ssh/id_rsa.pub
-- copy pub ssh key
ssh saturn-desktop3.eng.msli.com -l saturn
-- enter password
vi ~/.ssh/authorized_keys
-- paste copied pub ssh key


---------------------------------------------------------
Create virtual environment on Mac/Linux

virtualenv --python=python2.7 venv
---------------------------------------------------------
Connect to serial device (USB to RS-232 connected to Extreme switch)

- find device in /dev/ (ls /dev/cu. *tab* *tab*)
- screen /dev/cu.usbserial 9600 -L

- to quit and detach from screen: 
	- ctrl-alt-a ctrl-\ (y)
---------------------------------------------------------
Load JSON to python script:

def load_config(self):

    with open(os.path.join(os.getcwd(), '{}'.format(self.cfg_file_name))) as conf:
        self.cfg_file = json.load(conf)
---------------------------------------------------------
Fix an ECDSA fingerprint change error 

ssh-keygen -R <IPv4 of remote machine>
---------------------------------------------------------
SVN:

Checkout: 'svn checkout <URL> <checkout directory name>'
Status: 'svn status'
Add: 'svn add <file(s)>
Update: 'svn up'
Commit: 'svn commit -m <commit message>'
Get Info: 'svn info'
Get Commit History: 'svn log -l5 -v <URL of your repository>'

---------------------------------------------------------
Python Retrying on Exception:

def retry_if_connection_error(exception):
    """Return True after requests connection error"""
    return isinstance(exception, requests.exceptions.ConnectionError)

@retrying.retry(wait_fixed=2000, stop_max_attempt_number=3,
                retry_on_exception=retry_if_connection_error)
def upload_fw(self):
	<Code that will retry if ConnectionError exception is raised>

---------------------------------------------------------
Python Timeout

timeout = 30
start_time = time.time()
do_a_thing = True

while do_a_thing:
	current_time = round(time.time() - start_time, 3)
	if current_time >= timeout:
		do_a_thing = False
		break/continue

--------------------------------------------------------
Comment out multiple lines in vi:

:<line1>,<line2>s/^/#

Uncomment out multiple lines in vi:

:<line1>,<line2>s/^#/

i.e. :66,70s/^/# or :66,70s/^#/

--------------------------------------------------------
ReGex:
# search for thing in a section of a string
array_notes = 'Blah Blah Freq: 233.4Hz Blah Blah Blah'
freq_result = re.search(r'Freq:(.*)Hz', array_notes)
freq_result.match(1) # 233.4

# search for digits
match = re.search(r'\d+', response['control_point'])

# check for serial number validity:
pattern = re.compile("^([0-9]){8}$")

# use to determine user input prompt (no logger at this point)
first_attempt = True

match = False

while not match:
    if first_attempt:
        serial = raw_input('Scan or type your Serial Number and press Enter: [>>] ')
        first_attempt = False
    else:
        serial = raw_input('Serial Number is not valid! Try again: [>>] ')

    # try to match serial number with regex pattern
    match = pattern.match(serial)

# regex pattern for MAC Address
pattern = re.compile("^([0-9a-fA-F]{2}:){5}[0-9a-fA-F]{2}$")


--------------------------------------------------------
# Python create SSH and SCP instances:
import paramiko

ssh_client = paramiko.SSHClient()
ssh_client.set_missing_host_key_policy(paramiko.AutoAddPolicy())

ssh_client.connect(
	hostname=self.default_ip,
    username='root',
        password='gravity'
    )

scp_client = SCPClient(self.ssh_client.get_transport())

--------------------------------------------------------
# execute SSH command and read stdout

stdin, stdout, stderr, = self.ssh_client.exec_command(
	r'/root/bin/identity.sh '
    '-m {} '
    '-s {}'.format(
            self.mac_addr,
            self.serial
        )
    )

    exit_status = stdout.channel.recv_exit_status()
    lines = stdout.readlines()
    if exit_status is not 0:
        self.log.error("[!!] Command Failed!!! Exit status %s", exit_status)
        for line in lines:
            self.log.error("[!!] Error message: %s", line.rstrip('\n'))
        raise Exception('identity.sh failed')

    else:
        for line in lines:
            self.log.info('\t{}'.format(line.rstrip()))

--------------------------------------------------------
Python SCP

scp_client.get(
	remote_factory_config_path,
    cwd
    )

scp_client.put(
	remote_factory_config_path,
    cwd
    )

--------------------------------------------------------
Memory address of Python object

cat_sound = 'meow'
print hex(id(cat_sound))

0x10a96fea0



